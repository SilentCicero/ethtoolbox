{"id":"node_modules/ethjs-extras/lib/index.js","dependencies":[{"name":"/home/nick/github/ethtoolbox/package.json","includedInParent":true,"mtime":1554906426801},{"name":"/home/nick/github/ethtoolbox/node_modules/ethjs-extras/package.json","includedInParent":true,"mtime":1554906694122},{"name":"ethjs-rpc","loc":{"line":1,"column":23},"parent":"/home/nick/github/ethtoolbox/node_modules/ethjs-extras/lib/index.js","resolved":"/home/nick/github/ethtoolbox/node_modules/ethjs-rpc/lib/index.js"},{"name":"ethjs-provider-http","loc":{"line":2,"column":29},"parent":"/home/nick/github/ethtoolbox/node_modules/ethjs-extras/lib/index.js","resolved":"/home/nick/github/ethtoolbox/node_modules/ethjs-provider-http/lib/index.js"},{"name":"js-sha3","loc":{"line":3,"column":26},"parent":"/home/nick/github/ethtoolbox/node_modules/ethjs-extras/lib/index.js","resolved":"/home/nick/github/ethtoolbox/node_modules/ethjs-extras/node_modules/js-sha3/src/sha3.js"},{"name":"ethers-contracts/interface","loc":{"line":4,"column":47},"parent":"/home/nick/github/ethtoolbox/node_modules/ethjs-extras/lib/index.js","resolved":"/home/nick/github/ethtoolbox/node_modules/ethers-contracts/interface.js"},{"name":"solidity-to-abi","loc":{"line":5,"column":30},"parent":"/home/nick/github/ethtoolbox/node_modules/ethjs-extras/lib/index.js","resolved":"/home/nick/github/ethtoolbox/node_modules/solidity-to-abi/src/index.js"},{"name":"bn.js","loc":{"line":6,"column":19},"parent":"/home/nick/github/ethtoolbox/node_modules/ethjs-extras/lib/index.js","resolved":"/home/nick/github/ethtoolbox/node_modules/bn.js/lib/bn.js"}],"generated":{"js":"const EthRPC = require('ethjs-rpc');\nconst HttpProvider = require('ethjs-provider-http');\nconst keccak256 = require('js-sha3').keccak_256;\nconst { encodeParams, decodeParams } = require('ethers-contracts/interface');\nconst SolidityToABI = require('solidity-to-abi');\nconst BN = require('bn.js');\n\nconst stripHexPrefix = val => typeof val === 'string' && val.indexOf('0x') === 0 ? val.slice(2) : val;\nconst hexPrefix = val => val ? `0x${stripHexPrefix((val || {}).div ? val.toString(16) : val)}` : val;\nconst hexToBN = val => (val || {}).div ? val : new BN(stripHexPrefix(hexPrefix(val)), 16);\nconst numToBN = val => (val || {}).div || String(val).indexOf('0x') !== -1 ? hexToBN(val) : new BN(val, 10);\nconst solToABI = val => val ? typeof val === 'string' ? SolidityToABI(val) : val : null;\nconst hexNum = val => hexPrefix(numToBN(val));\nconst blockPhraseOrNum = val => ['latest', 'pending', 'earliest'].includes(val) ? val : hexNum(val);\nconst empty = () => {};\nconst assign = Object.assign;\nconst names = arr => arr.map(v => v.name);\nconst types = arr => arr.map(v => v.type);\nconst intervalAndCall = (method, interval) => setInterval(method, interval || 3000, method());\n\n// create an encoded method signature from an ABI object\nfunction encodeSignature({ name, inputs }, eventSig = false) {\n  const signatureData = `${name}(${inputs.map(v => v.type).join(',')})`;\n\n  return `0x${''.slice.apply(keccak256(signatureData), eventSig ? [0] : [0, 8])}`;\n}\n\n// encode method ABI object with values in an array, output bytecode\nfunction encodeMethod(method, values, construct) {\n  const paramsEncoded = encodeParams(names(method.inputs), types(method.inputs), values);\n\n  return `${construct ? '0x' : encodeSignature(method)}${paramsEncoded.substring(2)}`;\n}\n\n// decode method data bytecode, from method ABI object\nfunction decodeMethod({ outputs }, data, arr = false) {\n  const outputData = decodeParams(names(outputs), types(outputs), data);\n\n  return arr ? outputData : outputs.reduce((acc, item, index) => assign(acc, {\n    [index]: outputData[index]\n  }, item.name ? { [item.name]: outputData[index] } : {}), {});\n}\n\nconst EthObject = function (defaultOptions = {}) {\n  const network = defaultOptions.network || 'ropsten';\n  const httpProvider = defaultOptions.httpProvider || `https://${network}.infura.io`;\n  const eth = defaultOptions.eth || new EthRPC(defaultOptions.provider || new HttpProvider(httpProvider));\n  if (!eth.raw) {\n    eth.raw = (method, ...args) => eth.sendAsync({ method, params: args });\n  }\n  return eth;\n};\n\n// just the raw method broken out in reverse ;)\nconst raw = (method, params = [], options = {}) => EthObject(options).raw(method, ...params);\n\n// get the balance of an account\nconst balanceOf = (address, args = {}) => new Promise((resolve, reject) => EthObject(args).raw('eth_getBalance', address, args.block || 'latest').then(hex => resolve(hexToBN(hex))).catch(error => reject(error)));\n\n// listen for ethereum accounts\nconst onAccount = (listener, args = {}) => intervalAndCall(() => EthObject(args).raw('eth_accounts').then(acc => acc.length ? listener(acc, null) : null).catch(error => listener(null, error)), args.interval);\n\n// listen for new block on network\nconst onBlock = (listener, args = {}, cblock) => intervalAndCall(() => EthObject(args).raw('eth_blockNumber').then(block => cblock !== block ? listener(hexToBN(cblock = block), null) : null).catch(error => listener(null, error)), args.interval);\n\n// listen for receipt of a transaction hash\nconst onReceipt = (txHash, args = {}) => new Promise((res, rej) => {\n  const interval = onBlock(() => EthObject(args).raw('eth_getTransactionReceipt', txHash).then(receipt => (receipt || {}).transactionHash ? res(receipt, clearInterval(interval)) : '').catch(error => rej(error, clearInterval(interval))));\n});\n\n// Decode a specific log item with a specific event abi\nfunction decodeLogItem(eventABI, log) {\n  if (!eventABI) return;\n\n  // gather non indexed inputs\n  const nonIndexed = eventABI.inputs.filter(input => !input.indexed);\n\n  // decode the event with nonindexed inputs\n  const event = decodeParams(names(nonIndexed), types(nonIndexed), log.data);\n\n  // decode each indexed input\n  eventABI.inputs.filter(i => i.indexed).map((input, i) => {\n    const topic = log.topics[i + (eventABI.anonymous ? 0 : 1)];\n    const data = decodeParams([input.name], [input.type], topic).pop();\n    event[input.name] = data;\n  });\n\n  // setup the event object data\n  event._eventName = eventABI.name;\n  event._eventLog = log;\n\n  // return event\n  return event;\n}\n\n// Create a decoder for all events defined in an abi. It returns a function which is called\n// on an array of log entries such as received from getLogs or getTransactionReceipt and parses\n// any matching log entries\nconst logDecoder = abi => {\n  const eventMap = abi.reduce((acc = {}, item) => assign({}, acc, {\n    [encodeSignature(item, true)]: item\n  }), {});\n\n  // return log items\n  return logItems => logItems.map(log => decodeLogItem(eventMap[log.topics[0]], log)).filter(i => i);\n};\n\n// low level call without provider setup\n// FIXX this.\nconst ethCall = (options, method) => new Promise((resolve, reject) => {\n  try {\n    // setup options object\n    const opts = assign({}, options, { ['abi']: solToABI(options.solidity) });\n\n    // setup additional options from args args: [ ..., { from: .. }]\n    const moreOpts = opts.args.length > ((opts.abi || {}).inputs || []).length ? opts.args.pop() : {};\n\n    // more opts > opts\n    const either = key => moreOpts[key] || opts[key];\n\n    // encode method data\n    const methodData = opts.abi ? encodeMethod(opts.abi, opts.args, either('construct')) : '';\n\n    // setup eth object then send async method\n    EthObject(opts).sendAsync({\n      method: `eth_${method = opts.method || 'call'}`,\n      params: [{\n        to: either('construct') ? undefined : opts.to || opts.address,\n        from: hexPrefix(either('from')),\n        [options.gasLimit ? 'gasLimit' : 'gas']: hexNum(either('gas') || either('gasLimit')),\n        gasPrice: hexNum(either('gasPrice') || '20000000000'),\n        value: hexNum(either('value') || '0x0'),\n        data: hexPrefix(`${stripHexPrefix(either('data')) || ''}${stripHexPrefix(methodData)}`)\n      }].concat(method === 'call' ? [blockPhraseOrNum(either('block') || 'latest')] : [])\n    }).then(value => {\n      // try to decode if a call, otherwise return tx receipt hash\n      try {\n        resolve(method === 'call' ? decodeMethod(opts.abi, value, opts.returnArray) : value);\n      } catch (error) {\n        reject(error);\n      }\n    }).catch(reject);\n  } catch (error) {\n    reject(error);\n  }\n});\n\n// eth contract\nconst EthContract = function (defaultOptions = {}, abi = [], decoder) {\n  // setup eth object\n  const eth = EthObject(defaultOptions);\n\n  // setup call properties\n  const callWithProps = (methodObj, method) => (...args) => ethCall({\n    eth,\n    from: defaultOptions.from,\n    to: defaultOptions.address,\n    method: method || 'call',\n    solidity: methodObj.solidity,\n    construct: methodObj.type === 'constructor' ? true : false,\n    args,\n    returnArray: defaultOptions.returnArray\n  });\n\n  // biuld method constructor\n  const methodContructor = method => {\n    const result = callWithProps(method);\n    result.call = callWithProps(method);\n    result.sendTransaction = callWithProps(method, 'sendTransaction');\n    return result;\n  };\n\n  // get logs\n  const getLogs = (args = {}) => new Promise((resolve, reject) => eth.raw('eth_getLogs', assign(args, {\n    fromBlock: blockPhraseOrNum(args.fromBlock),\n    toBlock: blockPhraseOrNum(args.toBlock),\n    address: hexPrefix(defaultOptions.address),\n    topics: args.topics || []\n  })).then((logs, decoded = decoder(logs)) => resolve(decoded)).catch(reject));\n\n  // setup onEvent method\n  const onEventSetup = eventAbi => (listener, args = {}, cblock = '0') => onBlock(block => getLogs(assign({\n    fromBlock: hexPrefix(args.fromBlock || hexToBN(cblock).add(hexToBN('1'))),\n    toBlock: hexPrefix(args.toBlock || (cblock = block))\n  }, args)).then(logs => logs.length ? listener(logs, null) : '').catch(error => listener(null, error)), { eth, interval: args.interval });\n\n  // setup final frozen cotnract object with methods and helpers\n  return Object.freeze(defaultOptions.methods.map((solidity, i) => ({ solidity, abi: solToABI(solidity) })).map((obj, i) => assign(obj, { assign: abi[i] = obj.abi })).reduce((acc, method) => assign(acc, {\n    [method.abi.type === 'constructor' ? 'constructor' : method.abi.name]: methodContructor(method)\n  }), { abi, logDecoder: decoder = logDecoder(abi), getLogs, onEvent: onEventSetup(abi) }));\n};\n\n// send transaction method broken out\nconst sendTransaction = (opts = {}) => ethCall(assign({ method: 'sendTransaction' }, opts));\n\n// build eth object\nconst Eth = function (defaultOptions = {}) {\n  const self = EthObject(defaultOptions);\n  self.balanceOf = (addr, opts = {}) => balanceOf(addr, assign(defaultOptions, opts));\n  self.onAccount = (listener, opts = {}) => onAccount(listener, assign(defaultOptions, opts));\n  self.onBlock = (addr, opts = {}) => onBlock(addr, assign(defaultOptions, opts));\n  self.onReceipt = (addr, opts = {}) => onReceipt(addr, assign(defaultOptions, opts));\n  self.call = (opts = {}) => ethCall(assign(defaultOptions, opts));\n  self.sendTransaction = (opts = {}) => sendTransaction(assign(defaultOptions, opts));\n  self.contract = (opts = {}) => EthContract(assign(defaultOptions, opts));\n  return self;\n};\n\n// export modules\nmodule.exports = {\n  EthRPC,\n  onBlock,\n  onAccount,\n  onReceipt,\n  HttpProvider,\n  keccak256,\n  Eth,\n  raw,\n  call: ethCall,\n  sendTransaction,\n  balanceOf,\n  solToABI,\n  encodeParams,\n  decodeParams,\n  ethCall,\n  EthContract,\n  encodeSignature,\n  encodeMethod,\n  decodeMethod,\n  logDecoder,\n  hexNum,\n  hexToBN,\n  hexPrefix,\n  stripHexPrefix,\n  BN,\n  empty,\n  solToABI,\n  numToBN\n};","map":{"mappings":[{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/ethjs-extras/lib/index.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}}],"sources":{"node_modules/ethjs-extras/lib/index.js":"const EthRPC = require('ethjs-rpc');\nconst HttpProvider = require('ethjs-provider-http');\nconst keccak256 = require('js-sha3').keccak_256;\nconst { encodeParams, decodeParams } = require('ethers-contracts/interface');\nconst SolidityToABI = require('solidity-to-abi');\nconst BN = require('bn.js');\n\nconst stripHexPrefix = val => typeof val === 'string' && val.indexOf('0x') === 0 ? val.slice(2) : val;\nconst hexPrefix = val => val ? `0x${stripHexPrefix((val || {}).div ? val.toString(16) : val)}` : val;\nconst hexToBN = val => (val || {}).div ? val : new BN(stripHexPrefix(hexPrefix(val)), 16);\nconst numToBN = val => (val || {}).div || String(val).indexOf('0x') !== -1 ? hexToBN(val) : new BN(val, 10);\nconst solToABI = val => val ? typeof val === 'string' ? SolidityToABI(val) : val : null;\nconst hexNum = val => hexPrefix(numToBN(val));\nconst blockPhraseOrNum = val => ['latest', 'pending', 'earliest'].includes(val) ? val : hexNum(val);\nconst empty = () => {};\nconst assign = Object.assign;\nconst names = arr => arr.map(v => v.name);\nconst types = arr => arr.map(v => v.type);\nconst intervalAndCall = (method, interval) => setInterval(method, interval || 3000, method());\n\n// create an encoded method signature from an ABI object\nfunction encodeSignature({ name, inputs }, eventSig = false) {\n  const signatureData = `${name}(${inputs.map(v => v.type).join(',')})`;\n\n  return `0x${''.slice.apply(keccak256(signatureData), eventSig ? [0] : [0, 8])}`;\n}\n\n// encode method ABI object with values in an array, output bytecode\nfunction encodeMethod(method, values, construct) {\n  const paramsEncoded = encodeParams(names(method.inputs), types(method.inputs), values);\n\n  return `${construct ? '0x' : encodeSignature(method)}${paramsEncoded.substring(2)}`;\n}\n\n// decode method data bytecode, from method ABI object\nfunction decodeMethod({ outputs }, data, arr = false) {\n  const outputData = decodeParams(names(outputs), types(outputs), data);\n\n  return arr ? outputData : outputs.reduce((acc, item, index) => assign(acc, {\n    [index]: outputData[index]\n  }, item.name ? { [item.name]: outputData[index] } : {}), {});\n}\n\nconst EthObject = function (defaultOptions = {}) {\n  const network = defaultOptions.network || 'ropsten';\n  const httpProvider = defaultOptions.httpProvider || `https://${network}.infura.io`;\n  const eth = defaultOptions.eth || new EthRPC(defaultOptions.provider || new HttpProvider(httpProvider));\n  if (!eth.raw) {\n    eth.raw = (method, ...args) => eth.sendAsync({ method, params: args });\n  }\n  return eth;\n};\n\n// just the raw method broken out in reverse ;)\nconst raw = (method, params = [], options = {}) => EthObject(options).raw(method, ...params);\n\n// get the balance of an account\nconst balanceOf = (address, args = {}) => new Promise((resolve, reject) => EthObject(args).raw('eth_getBalance', address, args.block || 'latest').then(hex => resolve(hexToBN(hex))).catch(error => reject(error)));\n\n// listen for ethereum accounts\nconst onAccount = (listener, args = {}) => intervalAndCall(() => EthObject(args).raw('eth_accounts').then(acc => acc.length ? listener(acc, null) : null).catch(error => listener(null, error)), args.interval);\n\n// listen for new block on network\nconst onBlock = (listener, args = {}, cblock) => intervalAndCall(() => EthObject(args).raw('eth_blockNumber').then(block => cblock !== block ? listener(hexToBN(cblock = block), null) : null).catch(error => listener(null, error)), args.interval);\n\n// listen for receipt of a transaction hash\nconst onReceipt = (txHash, args = {}) => new Promise((res, rej) => {\n  const interval = onBlock(() => EthObject(args).raw('eth_getTransactionReceipt', txHash).then(receipt => (receipt || {}).transactionHash ? res(receipt, clearInterval(interval)) : '').catch(error => rej(error, clearInterval(interval))));\n});\n\n// Decode a specific log item with a specific event abi\nfunction decodeLogItem(eventABI, log) {\n  if (!eventABI) return;\n\n  // gather non indexed inputs\n  const nonIndexed = eventABI.inputs.filter(input => !input.indexed);\n\n  // decode the event with nonindexed inputs\n  const event = decodeParams(names(nonIndexed), types(nonIndexed), log.data);\n\n  // decode each indexed input\n  eventABI.inputs.filter(i => i.indexed).map((input, i) => {\n    const topic = log.topics[i + (eventABI.anonymous ? 0 : 1)];\n    const data = decodeParams([input.name], [input.type], topic).pop();\n    event[input.name] = data;\n  });\n\n  // setup the event object data\n  event._eventName = eventABI.name;\n  event._eventLog = log;\n\n  // return event\n  return event;\n}\n\n// Create a decoder for all events defined in an abi. It returns a function which is called\n// on an array of log entries such as received from getLogs or getTransactionReceipt and parses\n// any matching log entries\nconst logDecoder = abi => {\n  const eventMap = abi.reduce((acc = {}, item) => assign({}, acc, {\n    [encodeSignature(item, true)]: item\n  }), {});\n\n  // return log items\n  return logItems => logItems.map(log => decodeLogItem(eventMap[log.topics[0]], log)).filter(i => i);\n};\n\n// low level call without provider setup\n// FIXX this.\nconst ethCall = (options, method) => new Promise((resolve, reject) => {\n  try {\n    // setup options object\n    const opts = assign({}, options, { ['abi']: solToABI(options.solidity) });\n\n    // setup additional options from args args: [ ..., { from: .. }]\n    const moreOpts = opts.args.length > ((opts.abi || {}).inputs || []).length ? opts.args.pop() : {};\n\n    // more opts > opts\n    const either = key => moreOpts[key] || opts[key];\n\n    // encode method data\n    const methodData = opts.abi ? encodeMethod(opts.abi, opts.args, either('construct')) : '';\n\n    // setup eth object then send async method\n    EthObject(opts).sendAsync({\n      method: `eth_${method = opts.method || 'call'}`,\n      params: [{\n        to: either('construct') ? undefined : opts.to || opts.address,\n        from: hexPrefix(either('from')),\n        [options.gasLimit ? 'gasLimit' : 'gas']: hexNum(either('gas') || either('gasLimit')),\n        gasPrice: hexNum(either('gasPrice') || '20000000000'),\n        value: hexNum(either('value') || '0x0'),\n        data: hexPrefix(`${stripHexPrefix(either('data')) || ''}${stripHexPrefix(methodData)}`)\n      }].concat(method === 'call' ? [blockPhraseOrNum(either('block') || 'latest')] : [])\n    }).then(value => {\n      // try to decode if a call, otherwise return tx receipt hash\n      try {\n        resolve(method === 'call' ? decodeMethod(opts.abi, value, opts.returnArray) : value);\n      } catch (error) {\n        reject(error);\n      }\n    }).catch(reject);\n  } catch (error) {\n    reject(error);\n  }\n});\n\n// eth contract\nconst EthContract = function (defaultOptions = {}, abi = [], decoder) {\n  // setup eth object\n  const eth = EthObject(defaultOptions);\n\n  // setup call properties\n  const callWithProps = (methodObj, method) => (...args) => ethCall({\n    eth,\n    from: defaultOptions.from,\n    to: defaultOptions.address,\n    method: method || 'call',\n    solidity: methodObj.solidity,\n    construct: methodObj.type === 'constructor' ? true : false,\n    args,\n    returnArray: defaultOptions.returnArray\n  });\n\n  // biuld method constructor\n  const methodContructor = method => {\n    const result = callWithProps(method);\n    result.call = callWithProps(method);\n    result.sendTransaction = callWithProps(method, 'sendTransaction');\n    return result;\n  };\n\n  // get logs\n  const getLogs = (args = {}) => new Promise((resolve, reject) => eth.raw('eth_getLogs', assign(args, {\n    fromBlock: blockPhraseOrNum(args.fromBlock),\n    toBlock: blockPhraseOrNum(args.toBlock),\n    address: hexPrefix(defaultOptions.address),\n    topics: args.topics || []\n  })).then((logs, decoded = decoder(logs)) => resolve(decoded)).catch(reject));\n\n  // setup onEvent method\n  const onEventSetup = eventAbi => (listener, args = {}, cblock = '0') => onBlock(block => getLogs(assign({\n    fromBlock: hexPrefix(args.fromBlock || hexToBN(cblock).add(hexToBN('1'))),\n    toBlock: hexPrefix(args.toBlock || (cblock = block))\n  }, args)).then(logs => logs.length ? listener(logs, null) : '').catch(error => listener(null, error)), { eth, interval: args.interval });\n\n  // setup final frozen cotnract object with methods and helpers\n  return Object.freeze(defaultOptions.methods.map((solidity, i) => ({ solidity, abi: solToABI(solidity) })).map((obj, i) => assign(obj, { assign: abi[i] = obj.abi })).reduce((acc, method) => assign(acc, {\n    [method.abi.type === 'constructor' ? 'constructor' : method.abi.name]: methodContructor(method)\n  }), { abi, logDecoder: decoder = logDecoder(abi), getLogs, onEvent: onEventSetup(abi) }));\n};\n\n// send transaction method broken out\nconst sendTransaction = (opts = {}) => ethCall(assign({ method: 'sendTransaction' }, opts));\n\n// build eth object\nconst Eth = function (defaultOptions = {}) {\n  const self = EthObject(defaultOptions);\n  self.balanceOf = (addr, opts = {}) => balanceOf(addr, assign(defaultOptions, opts));\n  self.onAccount = (listener, opts = {}) => onAccount(listener, assign(defaultOptions, opts));\n  self.onBlock = (addr, opts = {}) => onBlock(addr, assign(defaultOptions, opts));\n  self.onReceipt = (addr, opts = {}) => onReceipt(addr, assign(defaultOptions, opts));\n  self.call = (opts = {}) => ethCall(assign(defaultOptions, opts));\n  self.sendTransaction = (opts = {}) => sendTransaction(assign(defaultOptions, opts));\n  self.contract = (opts = {}) => EthContract(assign(defaultOptions, opts));\n  return self;\n};\n\n// export modules\nmodule.exports = {\n  EthRPC,\n  onBlock,\n  onAccount,\n  onReceipt,\n  HttpProvider,\n  keccak256,\n  Eth,\n  raw,\n  call: ethCall,\n  sendTransaction,\n  balanceOf,\n  solToABI,\n  encodeParams,\n  decodeParams,\n  ethCall,\n  EthContract,\n  encodeSignature,\n  encodeMethod,\n  decodeMethod,\n  logDecoder,\n  hexNum,\n  hexToBN,\n  hexPrefix,\n  stripHexPrefix,\n  BN,\n  empty,\n  solToABI,\n  numToBN\n};"},"lineCount":239}},"hash":"757dbca23e08388a3daf1a6d387cc2e1","cacheData":{"env":{}}}