{"id":"node_modules/solidity-to-abi/src/index.js","dependencies":[{"name":"/home/nick/github/ethtoolbox/package.json","includedInParent":true,"mtime":1554906426801},{"name":"/home/nick/github/ethtoolbox/node_modules/solidity-to-abi/package.json","includedInParent":true,"mtime":1554906694122}],"generated":{"js":"// build inputs or outputs array from raw inputs string\nfunction buildInputsArray(rawInputsString) {\n  let returnArray = []; // eslint-disable-line\n  const rawMethodInputs = rawInputsString.split(',');\n\n  // no inputs\n  if (typeof rawMethodInputs === 'undefined' || rawMethodInputs.length === 0) {\n    return [];\n  }\n\n  rawMethodInputs.forEach((rawMethodInput) => {\n    const inputData = rawMethodInput.trim().split(' ');\n    const type = inputData[0];\n    const indexed = inputData.length === 3 && inputData.indexOf('indexed') !== -1;\n    const name = indexed ? (inputData[2] || '') : inputData[1] || '';\n\n    // if type exists\n    if (type !== '' && typeof type !== 'undefined') {\n      returnArray.push(Object.assign(indexed ? { indexed } : {}, {\n        type,\n        name,\n      }));\n    }\n  });\n\n  return returnArray;\n}\n\n// parse a solidity method interface\nfunction solidityToABI(methodInterface, options = {}) {\n  // count open and clsoed\n  const methodABIObject = {};\n\n  // not a string\n  if (typeof methodInterface !== 'string') {\n    throw new Error(`Method interface must be a string, currently ${typeof methodInterface}`);\n  }\n\n  // empty string\n  if (methodInterface.length === 0) {\n    throw new Error(`Solidity method interface must have a length greater than zero, currently ${methodInterface.length}`);\n  }\n\n  // count open brackets, closed brackets, colon count, outpouts and invalid characters\n  const openBrackets = (methodInterface.match(/\\(/g) || []).length;\n  const closedBrackets = (methodInterface.match(/\\)/g) || []).length;\n  const colonCount = (methodInterface.match(/:/g) || []).length;\n  const hasOutputs = openBrackets === 2 && closedBrackets === 2 && colonCount === 1;\n  const hasInvalidCharacters = methodInterface.replace(/([A-Za-z0-9\\_\\s\\,\\:(\\)]+)/g, '').trim().length > 0; // eslint-disable-line\n\n  // invalid characters\n  if (hasInvalidCharacters) {\n    throw new Error('Invalid Solidity method interface, your method interface contains invalid chars. Only letters, numbers, spaces, commas, underscores, brackets and colons.');\n  }\n\n  // method ABI object assembly\n  methodABIObject.name = methodInterface.slice(0, methodInterface.indexOf('('));\n  methodABIObject.type = options.type || 'function';\n\n  // add payable\n  if (methodABIObject.type === 'function') {\n    methodABIObject.payable = options.payable || false;\n  }\n\n  // constant\n  methodABIObject.constant = options.constant || true;\n  const methodInputsString = methodInterface.slice(methodInterface.indexOf('(') + 1, methodInterface.indexOf(')')).trim();\n  const methodOutputString = (hasOutputs && methodInterface.slice(methodInterface.lastIndexOf('(') + 1, methodInterface.lastIndexOf(')')) || '').trim();\n  methodABIObject.inputs = buildInputsArray(methodInputsString);\n  methodABIObject.outputs = buildInputsArray(methodOutputString);\n\n  // check open brackets\n  if (methodABIObject.name === '' || typeof methodABIObject.name === 'undefined') {\n    throw new Error('Invalid Solidity method interface, no method name');\n  }\n\n  // check open brackets\n  if (openBrackets !== 1 && openBrackets !== 2) {\n    throw new Error(`Invalid Solidity method interface, too many or too little open brackets in solidity interface, currenlty only ${openBrackets} open brackets!`);\n  }\n\n  // check open brackets\n  if (openBrackets !== 1 && openBrackets !== 2) {\n    throw new Error('Invalid Solidity method interface, too many or too little open brackets in solidity interface!');\n  }\n\n  // check closed brackets\n  if (closedBrackets !== 1 && closedBrackets !== 2) {\n    throw new Error('Invalid Solidity method interface, too many or too little closed brackets in solidity interface!');\n  }\n\n  // check colon count\n  if (colonCount !== 0 && colonCount !== 1) {\n    throw new Error('Invalid Solidity method interface, to many or too little colons.');\n  }\n\n  // return method abi object\n  return methodABIObject;\n}\n\n// module export\nmodule.exports = solidityToABI;\n","map":{"mappings":[{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/solidity-to-abi/src/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}}],"sources":{"node_modules/solidity-to-abi/src/index.js":"// build inputs or outputs array from raw inputs string\nfunction buildInputsArray(rawInputsString) {\n  let returnArray = []; // eslint-disable-line\n  const rawMethodInputs = rawInputsString.split(',');\n\n  // no inputs\n  if (typeof rawMethodInputs === 'undefined' || rawMethodInputs.length === 0) {\n    return [];\n  }\n\n  rawMethodInputs.forEach((rawMethodInput) => {\n    const inputData = rawMethodInput.trim().split(' ');\n    const type = inputData[0];\n    const indexed = inputData.length === 3 && inputData.indexOf('indexed') !== -1;\n    const name = indexed ? (inputData[2] || '') : inputData[1] || '';\n\n    // if type exists\n    if (type !== '' && typeof type !== 'undefined') {\n      returnArray.push(Object.assign(indexed ? { indexed } : {}, {\n        type,\n        name,\n      }));\n    }\n  });\n\n  return returnArray;\n}\n\n// parse a solidity method interface\nfunction solidityToABI(methodInterface, options = {}) {\n  // count open and clsoed\n  const methodABIObject = {};\n\n  // not a string\n  if (typeof methodInterface !== 'string') {\n    throw new Error(`Method interface must be a string, currently ${typeof methodInterface}`);\n  }\n\n  // empty string\n  if (methodInterface.length === 0) {\n    throw new Error(`Solidity method interface must have a length greater than zero, currently ${methodInterface.length}`);\n  }\n\n  // count open brackets, closed brackets, colon count, outpouts and invalid characters\n  const openBrackets = (methodInterface.match(/\\(/g) || []).length;\n  const closedBrackets = (methodInterface.match(/\\)/g) || []).length;\n  const colonCount = (methodInterface.match(/:/g) || []).length;\n  const hasOutputs = openBrackets === 2 && closedBrackets === 2 && colonCount === 1;\n  const hasInvalidCharacters = methodInterface.replace(/([A-Za-z0-9\\_\\s\\,\\:(\\)]+)/g, '').trim().length > 0; // eslint-disable-line\n\n  // invalid characters\n  if (hasInvalidCharacters) {\n    throw new Error('Invalid Solidity method interface, your method interface contains invalid chars. Only letters, numbers, spaces, commas, underscores, brackets and colons.');\n  }\n\n  // method ABI object assembly\n  methodABIObject.name = methodInterface.slice(0, methodInterface.indexOf('('));\n  methodABIObject.type = options.type || 'function';\n\n  // add payable\n  if (methodABIObject.type === 'function') {\n    methodABIObject.payable = options.payable || false;\n  }\n\n  // constant\n  methodABIObject.constant = options.constant || true;\n  const methodInputsString = methodInterface.slice(methodInterface.indexOf('(') + 1, methodInterface.indexOf(')')).trim();\n  const methodOutputString = (hasOutputs && methodInterface.slice(methodInterface.lastIndexOf('(') + 1, methodInterface.lastIndexOf(')')) || '').trim();\n  methodABIObject.inputs = buildInputsArray(methodInputsString);\n  methodABIObject.outputs = buildInputsArray(methodOutputString);\n\n  // check open brackets\n  if (methodABIObject.name === '' || typeof methodABIObject.name === 'undefined') {\n    throw new Error('Invalid Solidity method interface, no method name');\n  }\n\n  // check open brackets\n  if (openBrackets !== 1 && openBrackets !== 2) {\n    throw new Error(`Invalid Solidity method interface, too many or too little open brackets in solidity interface, currenlty only ${openBrackets} open brackets!`);\n  }\n\n  // check open brackets\n  if (openBrackets !== 1 && openBrackets !== 2) {\n    throw new Error('Invalid Solidity method interface, too many or too little open brackets in solidity interface!');\n  }\n\n  // check closed brackets\n  if (closedBrackets !== 1 && closedBrackets !== 2) {\n    throw new Error('Invalid Solidity method interface, too many or too little closed brackets in solidity interface!');\n  }\n\n  // check colon count\n  if (colonCount !== 0 && colonCount !== 1) {\n    throw new Error('Invalid Solidity method interface, to many or too little colons.');\n  }\n\n  // return method abi object\n  return methodABIObject;\n}\n\n// module export\nmodule.exports = solidityToABI;\n"},"lineCount":103}},"hash":"6c474aa79c89919706c453d28140cee4","cacheData":{"env":{}}}